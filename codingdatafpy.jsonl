{"text": "What is Python?", "label": "Python is a high-level, general-purpose programming language. It is known for its readability and simplicity, making it a great choice for beginners."}
{"text": "How do you install Python?", "label": "You can download Python from its official website python.org and follow the installation instructions. After installing, you can verify it by typing 'python --version' in your terminal or command prompt."}
{"text": "What are variables?", "label": "Variables are used to store values in Python. For example: number = 5, text = 'Hello, Python!'."}
{"text": "What are data types in Python?", "label": "Common data types in Python include integers, floats, strings, lists, tuples, dictionaries, and sets."}
{"text": "What are operators in Python?", "label": "Operators are special symbols that perform operations on variables and values. Examples include +, -, *, / for arithmetic operations and ==, !=, >, < for comparison operations."}
{"text": "What is a function in Python?", "label": "A function is a block of code that only runs when it is called. You can pass data, known as parameters, into a function. It can return data as a result."}
{"text": "How do you define a function in Python?", "label": "You define a function using the 'def' keyword. For example: def my_function():\n    print('Hello from a function')."}
{"text": "What are lambda functions?", "label": "Lambda functions are small anonymous functions defined with the 'lambda' keyword. For example: x = lambda a, b: a + b."}
{"text": "What is a list in Python?", "label": "A list is a collection which is ordered and changeable. It allows duplicate members. For example: my_list = [1, 2, 3, 4, 5]."}
{"text": "What is a dictionary in Python?", "label": "A dictionary is a collection which is unordered, changeable, and indexed. It has keys and values. For example: my_dict = {'name': 'Ali', 'age': 25}."}
{"text": "How do you add items to a list?", "label": "You can add items to a list using the 'append()' method. For example: my_list.append(6)."}
{"text": "How do you remove items from a list?", "label": "You can remove items from a list using the 'remove()' method or the 'pop()' method. For example: my_list.remove(2) or my_list.pop(1)."}
{"text": "What is list comprehension?", "label": "List comprehension provides a concise way to create lists. For example: [x for x in range(10) if x % 2 == 0]."}
{"text": "How do you read a file in Python?", "label": "You can read a file using the 'open()' function. For example: with open('file.txt', 'r') as file:\n    contents = file.read()."}
{"text": "How do you write to a file in Python?", "label": "You can write to a file using the 'open()' function with 'w' or 'a' mode. For example: with open('file.txt', 'w') as file:\n    file.write('Hello, world!')."}
{"text": "What is exception handling in Python?", "label": "Exception handling allows you to handle errors gracefully using 'try', 'except' blocks. For example: try:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')."}
{"text": "What are Python modules?", "label": "Modules are files containing Python code. You can import modules to use their functions and variables. For example: import math."}
{"text": "How do you install external libraries in Python?", "label": "You can install external libraries using pip, the package installer for Python. For example: pip install numpy."}
{"text": "What is OOP in Python?", "label": "Object-Oriented Programming (OOP) is a paradigm that uses objects and classes. It helps in organizing complex programs."}
{"text": "What is a class in Python?", "label": "A class is a blueprint for creating objects. It defines a set of attributes and methods that the created objects will have. For example: class MyClass:\n    x = 5."}
{"text": "What is an object in Python?", "label": "An object is an instance of a class. For example: p1 = MyClass()."}
{"text": "What is inheritance in Python?", "label": "Inheritance allows one class to inherit attributes and methods from another class. For example: class ChildClass(ParentClass)."}
{"text": "What is polymorphism in Python?", "label": "Polymorphism allows methods to do different things based on the object it is acting upon, even if they share the same name."}
{"text": "What is encapsulation in Python?", "label": "Encapsulation restricts direct access to some of the object's components, which can help prevent the accidental modification of data."}
{"text": "Can you give an example of a simple calculator program in Python?", "label": "Sure! Here's a simple calculator:\n\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\nprint('Select operation:')\nprint('1.Add')\nprint('2.Subtract')\nprint('3.Multiply')\nprint('4.Divide')\n\nchoice = input('Enter choice(1/2/3/4): ')\n\nnum1 = float(input('Enter first number: '))\nnum2 = float(input('Enter second number: '))\n\nif choice == '1':\n    print(num1, '+', num2, '=', add(num1, num2))\nelif choice == '2':\n    print(num1, '-', num2, '=', subtract(num1, num2))\nelif choice == '3':\n    print(num1, '*', num2, '=', multiply(num1, num2))\nelif choice == '4':\n    print(num1, '/', num2, '=', divide(num1, num2))\nelse:\n    print('Invalid input')"}
{"text": "Can you give an example of a contacts list program in Python?", "label": "Sure! Here's a simple contacts list program:\n\ncontacts = {}\n\ndef add_contact(name, phone):\n    contacts[name] = phone\n    print(f'Added {name} with phone number {phone}')\n\ndef remove_contact(name):\n    if name in contacts:\n        del contacts[name]\n        print(f'Removed contact {name}')\n    else:\n        print(f'Contact {name} not found')\n\ndef get_contact(name):\n    if name in contacts:\n        print(f'{name}: {contacts[name]}')\n    else:\n        print(f'Contact {name} not found')\n\nadd_contact('Alice', '123456789')\nadd_contact('Bob', '987654321')\nget_contact('Alice')\nremove_contact('Alice')\nget_contact('Alice')"}
{"text": "Can you give an example of a web scraper in Python?", "label": "Sure! Here's a simple web scraper using BeautifulSoup:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nprint(soup.title.text)\n\nfor link in soup.find_all('a'):\n    print(link.get('href'))"}
