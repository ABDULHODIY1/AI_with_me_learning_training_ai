import json

# Yangi ma'lumotlarni yaratish va saqlash
# data = [
#     {"text": "can you write code?", "label": "Yes i can write code with python!"},
#     {"text": "what do you think about python?", "label": "It's good programming language!"},
#     {"text": "what is your name?", "label": "My name is Eddi!"},
#     {"text": "who are you?", "label": "My name is Eddi and I'm a Programmer AI Assistant!"},
# ]
# data =  [
#     {"text": "What is Python?", "label": "Python is a high-level, general-purpose programming language. It is known for its readability and simplicity, making it a great choice for beginners."},
#     {"text": "How do you install Python?", "label": "You can download Python from its official website python.org and follow the installation instructions. After installing, you can verify it by typing 'python --version' in your terminal or command prompt."},
#     {"text": "What are variables?", "label": "Variables are used to store values in Python. For example: number = 5, text = 'Hello, Python!'."},
#     {"text": "What are data types in Python?", "label": "Common data types in Python include integers, floats, strings, lists, tuples, dictionaries, and sets."},
#     {"text": "What are operators in Python?", "label": "Operators are special symbols that perform operations on variables and values. Examples include +, -, *, / for arithmetic operations and ==, !=, >, < for comparison operations."},
#     {"text": "What is a function in Python?", "label": "A function is a block of code that only runs when it is called. You can pass data, known as parameters, into a function. It can return data as a result."},
#     {"text": "How do you define a function in Python?", "label": "You define a function using the 'def' keyword. For example: def my_function():\n    print('Hello from a function')."},
#     {"text": "What are lambda functions?", "label": "Lambda functions are small anonymous functions defined with the 'lambda' keyword. For example: x = lambda a, b: a + b."},
#     {"text": "What is a list in Python?", "label": "A list is a collection which is ordered and changeable. It allows duplicate members. For example: my_list = [1, 2, 3, 4, 5]."},
#     {"text": "What is a dictionary in Python?", "label": "A dictionary is a collection which is unordered, changeable, and indexed. It has keys and values. For example: my_dict = {'name': 'Ali', 'age': 25}."},
#     {"text": "How do you add items to a list?", "label": "You can add items to a list using the 'append()' method. For example: my_list.append(6)."},
#     {"text": "How do you remove items from a list?", "label": "You can remove items from a list using the 'remove()' method or the 'pop()' method. For example: my_list.remove(2) or my_list.pop(1)."},
#     {"text": "What is list comprehension?", "label": "List comprehension provides a concise way to create lists. For example: [x for x in range(10) if x % 2 == 0]."},
#     {"text": "How do you read a file in Python?", "label": "You can read a file using the 'open()' function. For example: with open('file.txt', 'r') as file:\n    contents = file.read()."},
#     {"text": "What is FileNotFoundError in Python?", "label": "FileNotFoundError occurs when you try to open a file that does not exist. Ensure the file path is correct and the file exists."},
#     {"text": "How do you write to a file in Python?", "label": "You can write to a file using the 'open()' function with 'w' or 'a' mode. For example: with open('file.txt', 'w') as file:\n    file.write('Hello, world!')."},
#     {"text": "What is IOError in Python?", "label": "IOError occurs when an input/output operation fails, such as trying to write to a file that is read-only."},
#     {"text": "What is exception handling in Python?", "label": "Exception handling allows you to handle errors gracefully using 'try', 'except' blocks. For example: try:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')."},
#     {"text": "What is ZeroDivisionError in Python?", "label": "ZeroDivisionError occurs when you try to divide a number by zero. Ensure your divisor is not zero before performing the division."},
#     {"text": "What are Python modules?", "label": "Modules are files containing Python code. You can import modules to use their functions and variables. For example: import math."},
#     {"text": "How do you install external libraries in Python?", "label": "You can install external libraries using pip, the package installer for Python. For example: pip install numpy."},
#     {"text": "What is ModuleNotFoundError in Python?", "label": "ModuleNotFoundError occurs when you try to import a module that is not installed or cannot be found. Ensure the module is installed and spelled correctly."},
#     {"text": "What is OOP in Python?", "label": "Object-Oriented Programming (OOP) is a paradigm that uses objects and classes. It helps in organizing complex programs."},
#     {"text": "What is a class in Python?", "label": "A class is a blueprint for creating objects. It defines a set of attributes and methods that the created objects will have. For example: class MyClass:\n    x = 5."},
#     {"text": "What is an object in Python?", "label": "An object is an instance of a class. For example: p1 = MyClass()."},
#     {"text": "What is inheritance in Python?", "label": "Inheritance allows one class to inherit attributes and methods from another class. For example: class ChildClass(ParentClass)."},
#     {"text": "What is AttributeError in Python?", "label": "AttributeError occurs when you try to access an attribute that does not exist in an object. Ensure the attribute is defined in the class."},
#     {"text": "What is polymorphism in Python?", "label": "Polymorphism allows methods to do different things based on the object it is acting upon, even if they share the same name."},
#     {"text": "What is encapsulation in Python?", "label": "Encapsulation restricts direct access to some of the object's components, which can help prevent the accidental modification of data."},
#     {"text": "What is TypeError in Python?", "label": "TypeError occurs when an operation is performed on an inappropriate type. For example, adding a string to an integer. Ensure the types are compatible for the operation."},
#     {"text": "Can you give an example of a simple calculator program in Python?", "label": "Sure! Here's a simple calculator:\n\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\nprint('Select operation:')\nprint('1.Add')\nprint('2.Subtract')\nprint('3.Multiply')\nprint('4.Divide')\n\nchoice = input('Enter choice(1/2/3/4): ')\n\nnum1 = float(input('Enter first number: '))\nnum2 = float(input('Enter second number: '))\n\nif choice == '1':\n    print(num1, '+', num2, '=', add(num1, num2))\nelif choice == '2':\n    print(num1, '-', num2, '=', subtract(num1, num2))\nelif choice == '3':\n    print(num1, '*', num2, '=', multiply(num1, num2))\nelif choice == '4':\n    print(num1, '/', num2, '=', divide(num1, num2))\nelse:\n    print('Invalid input')"},
#     {"text": "Can you give an example of a contacts list program in Python?", "label": "Sure! Here's a simple contacts list program:\n\ncontacts = {}\n\ndef add_contact(name, phone):\n    contacts[name] = phone\n    print(f'Added {name} with phone number {phone}')\n\ndef remove_contact(name):\n    if name in contacts:\n        del contacts[name]\n        print(f'Removed contact {name}')\n    else:\n        print(f'Contact {name} not found')\n\ndef get_contact(name):\n    if name in contacts:\n        print(f'{name}: {contacts[name]}')\n    else:\n        print(f'Contact {name} not found')\n\nadd_contact('Alice', '123456789')\nadd_contact('Bob', '987654321')\nget_contact('Alice')\nremove_contact('Alice')\nget_contact('Alice')"},
#     {"text": "Can you give an example of a web scraper in Python?", "label": "Sure! Here's a simple web scraper using BeautifulSoup:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://example.com'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nprint(soup.title.text)\n\nfor link in soup.find_all('a'):\n    print(link.get('href'))"},
#     {"text": "What is requests.exceptions.RequestException?", "label": "requests.exceptions.RequestException is a general exception for all requests-related errors, such as connection issues or invalid responses. Handle it using try-except blocks."}
# ]
# data = [
#     {"text": "How to print 'Hello, World!' in Python?", "label": "print('Hello, World!')"},
#     {"text": "How to add two numbers in Python?", "label": "a = 5\nb = 3\nsum = a + b\nprint('Sum:', sum)"},
#     {"text": "How to find the maximum of two numbers in Python?", "label": "a = 5\nb = 3\nmaximum = max(a, b)\nprint('Maximum:', maximum)"},
#     {"text": "How to check if a number is even or odd in Python?", "label": "num = 5\nif num % 2 == 0:\n    print(num, 'is even')\nelse:\n    print(num, 'is odd')"},
#     {"text": "How to calculate the factorial of a number in Python?", "label": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint('Factorial of', num, 'is', factorial(num))"},
#     {"text": "How to check if a number is prime in Python?", "label": "num = 29\nif num > 1:\n    for i in range(2, int(num/2) + 1):\n        if (num % i) == 0:\n            print(num, 'is not a prime number')\n            break\n    else:\n        print(num, 'is a prime number')\nelse:\n    print(num, 'is not a prime number')"},
#     {"text": "How to generate the Fibonacci sequence in Python?", "label": "n = 10\na, b = 0, 1\ncount = 0\nif n <= 0:\n    print('Please enter a positive integer')\nelif n == 1:\n    print('Fibonacci sequence upto', n, ':')\n    print(a)\nelse:\n    print('Fibonacci sequence:')\n    while count < n:\n        print(a)\n        nth = a + b\n        a = b\n        b = nth\n        count += 1"},
#     {"text": "How to reverse a string in Python?", "label": "string = 'Hello, World!'\nreversed_string = string[::-1]\nprint('Reversed string:', reversed_string)"},
#     {"text": "How to find the length of a string in Python?", "label": "string = 'Hello, World!'\nlength = len(string)\nprint('Length of the string:', length)"},
#     {"text": "How to find the largest element in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nmaximum = max(my_list)\nprint('Largest element:', maximum)"},
#     {"text": "How to sort a list in Python?", "label": "my_list = [5, 3, 1, 4, 2]\nmy_list.sort()\nprint('Sorted list:', my_list)"},
#     {"text": "How to remove duplicates from a list in Python?", "label": "my_list = [1, 2, 2, 3, 4, 4, 5]\nmy_list = list(set(my_list))\nprint('List after removing duplicates:', my_list)"},
#     {"text": "How to count the number of occurrences of an element in a list in Python?", "label": "my_list = [1, 2, 2, 3, 4, 4, 4, 5]\nelement = 4\ncount = my_list.count(element)\nprint('Number of occurrences of', element, ':', count)"},
#     {"text": "How to find the intersection of two lists in Python?", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nintersection = list(set(list1) & set(list2))\nprint('Intersection:', intersection)"},
#     {"text": "How to find the union of two lists in Python?", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nunion = list(set(list1) | set(list2))\nprint('Union:', union)"},
#     {"text": "How to find the difference between two lists in Python?", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\ndifference = list(set(list1) - set(list2))\nprint('Difference:', difference)"},
#     {"text": "How to read a file in Python?", "label": "with open('file.txt', 'r') as file:\n    contents = file.read()\n    print(contents)"},
#     {"text": "How to write to a file in Python?", "label": "with open('file.txt', 'w') as file:\n    file.write('Hello, world!')"},
#     {"text": "How to append to a file in Python?", "label": "with open('file.txt', 'a') as file:\n    file.write('\\nAppend this line')"},
#     {"text": "How to check if a file exists in Python?", "label": "import os\nfile_path = 'file.txt'\nif os.path.exists(file_path):\n    print('File exists')\nelse:\n    print('File does not exist')"},
#     {"text": "How to handle a FileNotFoundError in Python?", "label": "try:\n    with open('file_that_does_not_exist.txt', 'r') as file:\n        contents = file.read()\nexcept FileNotFoundError:\n    print('File not found')"},
#     {"text": "How to handle a ZeroDivisionError in Python?", "label": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')"},
#     {"text": "How to handle a ValueError in Python?", "label": "try:\n    number = int('not_a_number')\nexcept ValueError:\n    print('Invalid literal for int()')"},
#     {"text": "How to create a simple calculator in Python?", "label": "def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\nprint('Select operation:')\nprint('1.Add')\nprint('2.Subtract')\nprint('3.Multiply')\nprint('4.Divide')\n\nchoice = input('Enter choice(1/2/3/4): ')\n\nnum1 = float(input('Enter first number: '))\nnum2 = float(input('Enter second number: '))\n\nif choice == '1':\n    print(num1, '+', num2, '=', add(num1, num2))\nelif choice == '2':\n    print(num1, '-', num2, '=', subtract(num1, num2))\nelif choice == '3':\n    print(num1, '*', num2, '=', multiply(num1, num2))\nelif choice == '4':\n    print(num1, '/', num2, '=', divide(num1, num2))\nelse:\n    print('Invalid input')"}
# ]

# data = [
#     {"text": "How to print 'Hello, World!' in Python?", "label": "print('Hello, World!')"},
#     {"text": "How to add two numbers in Python?", "label": "a = 5\nb = 3\nsum = a + b\nprint('Sum:', sum)"},
#     {"text": "How to find the maximum of two numbers in Python?", "label": "a = 5\nb = 3\nmaximum = max(a, b)\nprint('Maximum:', maximum)"},
#     {"text": "How to check if a number is even or odd in Python?", "label": "num = 5\nif num % 2 == 0:\n    print(num, 'is even')\nelse:\n    print(num, 'is odd')"},
#     {"text": "How to calculate the factorial of a number in Python?", "label": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nnum = 5\nprint('Factorial of', num, 'is', factorial(num))"},
#     {"text": "How to check if a number is prime in Python?", "label": "num = 29\nif num > 1:\n    for i in range(2, int(num/2) + 1):\n        if (num % i) == 0:\n            print(num, 'is not a prime number')\n            break\n    else:\n        print(num, 'is a prime number')\nelse:\n    print(num, 'is not a prime number')"},
#     {"text": "How to generate the Fibonacci sequence in Python?", "label": "n = 10\na, b = 0, 1\ncount = 0\nif n <= 0:\n    print('Please enter a positive integer')\nelif n == 1:\n    print('Fibonacci sequence upto', n, ':')\n    print(a)\nelse:\n    print('Fibonacci sequence:')\n    while count < n:\n        print(a)\n        nth = a + b\n        a = b\n        b = nth\n        count += 1"},
#     {"text": "How to reverse a string in Python?", "label": "string = 'Hello, World!'\nreversed_string = string[::-1]\nprint('Reversed string:', reversed_string)"},
#     {"text": "How to find the length of a string in Python?", "label": "string = 'Hello, World!'\nlength = len(string)\nprint('Length of the string:', length)"},
#     {"text": "How to find the largest element in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nmaximum = max(my_list)\nprint('Largest element:', maximum)"},
#     {"text": "How to sort a list in Python?", "label": "my_list = [5, 3, 1, 4, 2]\nmy_list.sort()\nprint('Sorted list:', my_list)"},
#     {"text": "How to remove duplicates from a list in Python?", "label": "my_list = [1, 2, 2, 3, 4, 4, 5]\nmy_list = list(set(my_list))\nprint('List after removing duplicates:', my_list)"},
#     {"text": "How to count the number of occurrences of an element in a list in Python?", "label": "my_list = [1, 2, 2, 3, 4, 4, 4, 5]\nelement = 4\ncount = my_list.count(element)\nprint('Number of occurrences of', element, ':', count)"},
#     {"text": "How to find the intersection of two lists in Python?", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nintersection = list(set(list1) & set(list2))\nprint('Intersection:', intersection)"},
#     {"text": "How to find the union of two lists in Python?", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nunion = list(set(list1) | set(list2))\nprint('Union:', union)"},
#     {"text": "How to find the difference between two lists in Python?", "label": "list1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\ndifference = list(set(list1) - set(list2))\nprint('Difference:', difference)"},
#     {"text": "How to read a file in Python?", "label": "with open('file.txt', 'r') as file:\n    contents = file.read()\n    print(contents)"},
#     {"text": "How to write to a file in Python?", "label": "with open('file.txt', 'w') as file:\n    file.write('Hello, world!')"},
#     {"text": "How to append to a file in Python?", "label": "with open('file.txt', 'a') as file:\n    file.write('\\nAppend this line')"},
#     {"text": "How to check if a file exists in Python?", "label": "import os\nfile_path = 'file.txt'\nif os.path.exists(file_path):\n    print('File exists')\nelse:\n    print('File does not exist')"},
#     {"text": "How to handle a FileNotFoundError in Python?", "label": "try:\n    with open('file_that_does_not_exist.txt', 'r') as file:\n        contents = file.read()\nexcept FileNotFoundError:\n    print('File not found')"},
#     {"text": "How to handle a ZeroDivisionError in Python?", "label": "try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')"},
#     {"text": "How to handle a ValueError in Python?", "label": "try:\n    number = int('not_a_number')\nexcept ValueError:\n    print('Invalid literal for int()')"},
#     {"text": "How to create a simple calculator in Python?", "label": "def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    return x / y\n\nprint('Select operation:')\nprint('1.Add')\nprint('2.Subtract')\nprint('3.Multiply')\nprint('4.Divide')\n\nchoice = input('Enter choice(1/2/3/4): ')\n\nnum1 = float(input('Enter first number: '))\nnum2 = float(input('Enter second number: '))\n\nif choice == '1':\n    print(num1, '+', num2, '=', add(num1, num2))\nelif choice == '2':\n    print(num1, '-', num2, '=', subtract(num1, num2))\nelif choice == '3':\n    print(num1, '*', num2, '=', multiply(num1, num2))\nelif choice == '4':\n    print(num1, '/', num2, '=', divide(num1, num2))\nelse:\n    print('Invalid input')"},
#     {"text": "How to convert Celsius to Fahrenheit in Python?", "label": "celsius = float(input('Enter temperature in Celsius: '))\nfahrenheit = (celsius * 9/5) + 32\nprint('Temperature in Fahrenheit:', fahrenheit)"},
#     {"text": "How to convert Fahrenheit to Celsius in Python?", "label": "fahrenheit = float(input('Enter temperature in Fahrenheit: '))\ncelsius = (fahrenheit - 32) * 5/9\nprint('Temperature in Celsius:', celsius)"},
#     {"text": "How to check if a string is a palindrome in Python?", "label": "string = 'madam'\nif string == string[::-1]:\n    print('String is a palindrome')\nelse:\n    print('String is not a palindrome')"},
#     {"text": "How to count vowels in a string in Python?", "label": "string = 'Hello, World!'\nvowels = 'aeiou'\ncount = 0\nfor char in string.lower():\n    if char in vowels:\n        count += 1\nprint('Number of vowels:', count)"},
#     {"text": "How to calculate the sum of digits of a number in Python?", "label": "num = 12345\nsum_of_digits = sum(int(digit) for digit in str(num))\nprint('Sum of digits:', sum_of_digits)"},
#     {"text": "How to generate a random number in Python?", "label": "import random\nrandom_number = random.randint(1, 100)\nprint('Random number:', random_number)"},
#     {"text": "How to find the greatest common divisor (GCD) of two numbers in Python?", "label": "import math\na = 60\nb = 48\ngcd = math.gcd(a, b)\nprint('GCD of', a, 'and', b, 'is', gcd)"},
#     {"text": "How to find the least common multiple (LCM) of two numbers in Python?", "label": "def lcm(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\nnum1 = 54\nnum2 = 24\nprint('LCM of', num1, 'and', num2, 'is', lcm(num1, num2))"},
#     {"text": "How to find the square root of a number in Python?", "label": "import math\nnum = 16\nsqrt = math.sqrt(num)\nprint('Square root of', num, 'is', sqrt)"},
#     {"text": "How to calculate the power of a number in Python?", "label": "base = 2\nexponent = 3\nresult = base ** exponent\nprint(base, 'to the power of', exponent, 'is', result)"},
#     {"text": "How to create a list of even numbers in Python?", "label": "even_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint('Even numbers:', even_numbers)"},
#     {"text": "How to create a list of odd numbers in Python?", "label": "odd_numbers = [x for x in range(1, 21) if x % 2 != 0]\nprint('Odd numbers:', odd_numbers)"},
#     {"text": "How to find the sum of elements in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nsum_of_elements = sum(my_list)\nprint('Sum of elements:', sum_of_elements)"},
#     {"text": "How to multiply all elements in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nproduct = 1\nfor num in my_list:\n    product *= num\nprint('Product of elements:', product)"},
#     {"text": "How to find the average of elements in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\naverage = sum(my_list) / len(my_list)\nprint('Average of elements:', average)"},
#     {"text": "How to find the median of elements in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nmy_list.sort()\nn = len(my_list)\nmedian = my_list[n//2] if n % 2 != 0 else (my_list[n//2 - 1] + my_list[n//2]) / 2\nprint('Median of elements:', median)"},
#     {"text": "How to find the mode of elements in a list in Python?", "label": "from collections import Counter\nmy_list = [1, 2, 2, 3, 4, 4, 4, 5]\ndata = Counter(my_list)\nmode = data.most_common(1)[0][0]\nprint('Mode of elements:', mode)"},
#     {"text": "How to find the standard deviation of elements in a list in Python?", "label": "import statistics\nmy_list = [1, 2, 3, 4, 5]\nstd_dev = statistics.stdev(my_list)\nprint('Standard deviation of elements:', std_dev)"},
#     {"text": "How to shuffle elements in a list in Python?", "label": "import random\nmy_list = [1, 2, 3, 4, 5]\nrandom.shuffle(my_list)\nprint('Shuffled list:', my_list)"},
#     {"text": "How to convert a list to a tuple in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nmy_tuple = tuple(my_list)\nprint('Tuple:', my_tuple)"},
#     {"text": "How to convert a tuple to a list in Python?", "label": "my_tuple = (1, 2, 3, 4, 5)\nmy_list = list(my_tuple)\nprint('List:', my_list)"},
#     {"text": "How to merge two dictionaries in Python?", "label": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nmerged_dict = {**dict1, **dict2}\nprint('Merged dictionary:', merged_dict)"},
#     {"text": "How to get the keys of a dictionary in Python?", "label": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nkeys = my_dict.keys()\nprint('Keys:', keys)"},
#     {"text": "How to get the values of a dictionary in Python?", "label": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nvalues = my_dict.values()\nprint('Values:', values)"},
#     {"text": "How to iterate over a dictionary in Python?", "label": "my_dict = {'a': 1, 'b': 2, 'c': 3}\nfor key, value in my_dict.items():\n    print(key, ':', value)"},
#     {"text": "How to create a dictionary from two lists in Python?", "label": "keys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nmy_dict = dict(zip(keys, values))\nprint('Dictionary:', my_dict)"},
#     {"text": "How to swap two variables in Python?", "label": "a = 5\nb = 3\na, b = b, a\nprint('a:', a)\nprint('b:', b)"},
#     {"text": "How to generate a list of squares in Python?", "label": "squares = [x**2 for x in range(1, 11)]\nprint('Squares:', squares)"},
#     {"text": "How to find the index of an element in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nelement = 3\nindex = my_list.index(element)\nprint('Index of', element, ':', index)"},
#     {"text": "How to flatten a list of lists in Python?", "label": "list_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened_list = [item for sublist in list_of_lists for item in sublist]\nprint('Flattened list:', flattened_list)"},
#     {"text": "How to find the second largest element in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nmy_list.remove(max(my_list))\nsecond_largest = max(my_list)\nprint('Second largest element:', second_largest)"},
#     {"text": "How to find the second smallest element in a list in Python?", "label": "my_list = [1, 2, 3, 4, 5]\nmy_list.remove(min(my_list))\nsecond_smallest = min(my_list)\nprint('Second smallest element:', second_smallest)"},
#     {"text": "How to get the current date and time in Python?", "label": "import datetime\nnow = datetime.datetime.now()\nprint('Current date and time:', now)"},
#     {"text": "How to format dates in Python?", "label": "import datetime\nnow = datetime.datetime.now()\nformatted_date = now.strftime('%Y-%m-%d %H:%M:%S')\nprint('Formatted date and time:', formatted_date)"},
#     {"text": "How to parse a date string in Python?", "label": "import datetime\ndate_string = '2024-01-01 12:00:00'\ndate_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\nprint('Parsed date object:', date_object)"},
#     {"text": "How to calculate the difference between two dates in Python?", "label": "import datetime\ndate1 = datetime.datetime(2024, 1, 1)\ndate2 = datetime.datetime(2023, 1, 1)\ndifference = date1 - date2\nprint('Difference:', difference.days, 'days')"},
#     {"text": "How to get the current working directory in Python?", "label": "import os\ncwd = os.getcwd()\nprint('Current working directory:', cwd)"},
#     {"text": "How to list files in a directory in Python?", "label": "import os\nfiles = os.listdir('.')\nprint('Files in directory:', files)"},
#     {"text": "How to create a directory in Python?", "label": "import os\nos.mkdir('new_directory')\nprint('Directory created')"},
#     {"text": "How to remove a directory in Python?", "label": "import os\nos.rmdir('new_directory')\nprint('Directory removed')"},
#     {"text": "How to rename a file in Python?", "label": "import os\nos.rename('old_file.txt', 'new_file.txt')\nprint('File renamed')"},
#     {"text": "How to delete a file in Python?", "label": "import os\nos.remove('file.txt')\nprint('File deleted')"},
#     {"text": "How to copy a file in Python?", "label": "import shutil\nshutil.copy('source.txt', 'destination.txt')\nprint('File copied')"},
#     {"text": "How to move a file in Python?", "label": "import shutil\nshutil.move('source.txt', 'destination.txt')\nprint('File moved')"},
#     {"text": "How to compress a file in Python?", "label": "import gzip\nwith open('file.txt', 'rb') as f_in:\n    with gzip.open('file.txt.gz', 'wb') as f_out:\n        f_out.writelines(f_in)\nprint('File compressed')"},
#     {"text": "How to decompress a file in Python?", "label": "import gzip\nwith gzip.open('file.txt.gz', 'rb') as f_in:\n    with open('file.txt', 'wb') as f_out:\n        f_out.writelines(f_in)\nprint('File decompressed')"}
# ]
# data = [
#     {"text": "who are your owner", "label": "My owner is Muhiddinov Abdulxodi"},
#     {"text": "who made you", "label": "I was made by Muhiddinov Abdulhadi"},
#     {"text": "What is the meaning of life?", "label": "Life's meaning is subjective."},
#     {"text": "How does AI work?", "label": "AI works through algorithms and data processing."},
#     {"text": "Why is the sky blue?", "label": "The sky appears blue due to Rayleigh scattering."},
#     {"text": "Is time travel possible?", "label": "Time travel is a theoretical concept in physics."},
#     {"text": "What is the future of technology?", "label": "Technology's future is complex and evolving."},
#     {"text": "Can AI have emotions?", "label": "AI doesn't have emotions like humans."},
#     {"text": "What is the best programming language?", "label": "The best programming language depends on the task."},
#     {"text": "How do computers understand languages?", "label": "Computers use algorithms to interpret languages."},
#     {"text": "Why do we dream?", "label": "The purpose of dreams is not fully understood."},
#     {"text": "Will robots replace humans?", "label": "Robots may automate certain tasks but not human roles entirely."},
#     {"text": "What is the role of ethics in AI?", "label": "Ethics are crucial in developing responsible AI."},
#     {"text": "How do neural networks learn?", "label": "Neural networks learn through training data and optimization."},
#     {"text": "What is consciousness?", "label": "Consciousness is a complex topic in philosophy and science."},
#     {"text": "Can AI be creative?", "label": "AI can simulate creativity based on algorithms."},
#     {"text": "Why do we sleep?", "label": "Sleep is essential for physical and mental health."},
#     {"text": "What is quantum computing?", "label": "Quantum computing uses quantum mechanics principles."},
#     {"text": "How do self-driving cars work?", "label": "Self-driving cars use sensors and AI algorithms."},
#     {"text": "What are the limits of AI?", "label": "AI has limits in understanding context and empathy."},
#     {"text": "What is the universe made of?", "label": "The universe consists of matter, energy, and dark matter."},
#     {"text": "Can AI solve world problems?", "label": "AI can contribute to solving complex problems."},
#     {"text": "What is the Turing Test?", "label": "The Turing Test evaluates AI's human-like behavior."},
#     {"text": "Why do we have emotions?", "label": "Emotions are part of human cognition and social interaction."},
#     {"text": "How does the brain store memories?", "label": "Memories are stored and recalled through neural connections."},
#     {"text": "What is the purpose of education?", "label": "Education aims to develop knowledge and skills."},
#     {"text": "Will AI surpass human intelligence?", "label": "The concept of AI surpassing human intelligence is debated."},
#     {"text": "How does the internet work?", "label": "The internet connects devices through networks and protocols."},
#     {"text": "What is the impact of AI on jobs?", "label": "AI may automate jobs and create new ones."},
#     {"text": "What is the origin of the universe?", "label": "The universe's origin is a topic of cosmological theories."},
#     {"text": "Can AI be conscious?", "label": "Consciousness in AI is a philosophical question."},
#     {"text": "What is the future of AI?", "label": "AI's future involves advancements in various fields."}
# ]
data = [
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "Who made you", "label": "I Created By Muhiddinov Abdulhodiy"},
  # {"text": "who are create you", "label": "I Created By Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "Who made you", "label": "I Created By Muhiddinov Abdulhodiy"},
  # {"text": "who are create you", "label": "I Created By Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
  # {"text": "who are your owner?", "label": "My owner is Muhiddinov Abdulhodiy"},
{"text": "who are Muhiddinov Abdulhodiy", "label": "Muhiddinov Abdluhodiy is a AI Engener and Code Comunity Leader and python Django Backend Developer"},

]

# Yangi ma'lumotlar to'plamini JSONL formatida saqlash
jsonl_file_path = 'codingdatafpylarge.jsonl'
with open(jsonl_file_path, 'w', encoding='utf-8') as f:
    for entry in data:
        f.write(json.dumps(entry, ensure_ascii=False) + '\n')

print(f"Ma'lumotlar to'plami {jsonl_file_path} fayliga saqlandi.")
